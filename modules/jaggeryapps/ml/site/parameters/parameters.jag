<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ML - Machine Learner</title>
    <link href="../../css/bootstrap.css" rel="stylesheet">
    <link href="../../css/custom.css" rel="stylesheet">
    <link href="../../css/custom-theme.css" rel="stylesheet">
    <script src="../../js/respond.min.js"></script> 

    <%
        include("../../includes/tenantAware.jag");
        print('<script> var authEncoded = "'+session.get("authEncoded")+'"; </script>')
    %>
    
</head>

<body>

<div class="container col-lg-12 col-md-12 col-sm-12">

<!-- header -->
<header>
<div class="row wr-global-header">
	<div class="col-sm-8 app-logo"><img src="../../images/logo.png" /><h2 class="app-title">Machine Learner</h2>
	</div>
	<div class="col-sm-4">
		<div class="wr-auth pull-right">
			<a href="#" data-toggle="dropdown" class="cu-ico-right-button cu-ico-button-user"><% print(session.get("logged.user")); %></a>
			<div class="dropdown-menu">
				<div class="cu-arrow"></div>
				<div class="dropdown-menu-content">
					<a href="../logout/logout.jag" class="filter-item">Logout</a>
				</div>
			</div>			
		</div>
	</div>
</div>
</header>
<!-- /header -->

<!-- secondary header - app bar -->
<div id="nav" class="row wr-app-bar">
	<div class="col-md-9 wr-action-container">
		<div class="wr-project">
            <span class="title">PROJECTS \ </span><span id="nav-project"></span><span id="nav-analysis"></span>
        </div>

		<div class="wr-action-btn-bar">
			<a href="#" class="cu-btn btn-cancel" id="cancel-analysis">Cancel</a>
		</div>
	</div>

	<div class="col-md-3">
		<div class="wr-secondary-links pull-right">
			<a href="#" id="prev-btn" class="cu-btn btn-prev">Previous</a>
			<a href="#" id="btn-next" class="cu-btn-reverse btn-next">Next</a>
		</div>
	</div>
</div>
<!-- secondary header - app bar -->


<!-- content/body -->
<div class="row">
	<div class="col-lg-12 wr-secondary-bar">
		
		<!-- Wizard -->
	    <ul class="nav nav-pills nav-wizard">
            <li><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 1</span>Preprocess</a><div class="nav-arrow"></div></li>
            <li><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 2</span>Explore</a><div class="nav-arrow"></div></li>
            <li><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 3</span>Algorithms</a><div class="nav-arrow"></div></li>
            <li class="active"><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 4</span>Parameters</a><div class="nav-arrow"></div></li>
            <li><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 5</span>Model</a><div class="nav-arrow"></div></li>
	    </ul>

		
	</div>
</div>


<div class="row">
	<div class="col-md-12">
		

		<!-- content -->
		<div class="container col-md-12 col-centered wr-content">

			<div class="wr-form col-lg-5 col-centered">

				<h1 class="title">Parameters</h1>

	            <label class="input-label">Set Hyper-Parameters for <span id="algo-cat"></span>\ <strong id="display-name"></strong> <span class="help-tip glyphicon glyphicon-question-sign"></span></label>
	            <div class="spcr-2"></div>

	            <div id="parameter-inputs">
					<!-- <label class="input-label">Iterations<span class="help-tip glyphicon glyphicon-question-sign"></span></label>
					<div class="input-control text">
					    <input type="text" value="" placeholder="input text"/>
					</div>

					<label class="input-label">Responsive variable<span class="help-tip glyphicon glyphicon-question-sign"></span></label>
					<div class="input-control text">
					    <input type="text" value="" placeholder="input text"/> -->
					</div>
				</div>

			</div>

		</div>
		<!-- /content -->


	</div>
</div>
<!-- /content/body -->

</div>
    
<!--footer class="footer">
        <p>&copy; 2014 WSO2 Inc. All Rights Reserved</p>
</footer-->

<script src="https://code.jquery.com/jquery-latest.min.js"></script>
<script src="../../js/bootstrap.min.js"></script>
<script src="../../js/wso2.ml.util.js"></script>


<script type="text/javascript">

var serverUrl = window.location.origin;

var doubleRegEx = /^[+-]?\d+(\.\d+)?$/g;
var integerRegEx = /^\d+$/g;

$( document ).ready(function() {

	$('#nav').affix({
	      offset: {
	        top: $('header').height()
	      }
	});

	var algorithmName = getParameterByName('algorithmName');
    var projectName = getParameterByName('projectName');
    var analysisName = getParameterByName('analysisName');	
    var analysisId = getParameterByName('analysisId');
    var datasetId = getParameterByName('datasetId');
    var algorithmType = getParameterByName('algorithmType');
    var fromNext;

    var hyperParametersArray = [];
    // get previously set response variable
    $.ajax({
        type: "GET",
        url: serverUrl+"/api/analyses/"+analysisId+"/hyperParameters",
        async : false,
        dataType: 'json',
        beforeSend : function(xhr) {
            xhr.setRequestHeader("Authorization", "Basic " + authEncoded);
        },
        success: function(res) {
            var hyperParametersResponse = res;
            if (hyperParametersResponse == '') {
                fromNext = false;
            }
            else {
                fromNext = true;
                for (var i = 0; i < hyperParametersResponse.length; i++) {
                    hyperParametersArray[i] = hyperParametersResponse[i]['value'];
                }
            }
        },
        error: function(res) { //TODO: display error
            console.log("Error");
        }
    });

    // put path in application navigator
    $('#nav-project').text(projectName);
    $('#nav-analysis').text(" \\ "+analysisName);    

    $('#algo-cat').text(algorithmType);
    $('#display-name').text(algorithmName);

    var inputString = '';
    // set values for algorithm to build HTML inputs 
    var hyperParameterInputValues;
    if (algorithmName == 'LINEAR_REGRESSION') {
    	hyperParameterInputValues = [['Iterations','iterations',100],['Learning rate','learning-rate',0.001],['SGD data fraction','sgd-data-fraction',1]];
    }
    else if (algorithmName == 'RIDGE_REGRESSION' || algorithmName == 'LASSO_REGRESSION') {
    	hyperParameterInputValues = [['Iterations','iterations',100],['Learning rate','learning-rate',0.001],['Regularization parameter','reg-parameter',0.001],['SGD data fraction','sgd-data-fraction',1]];
    }
    else if (algorithmName == 'LOGISTIC_REGRESSION') {
    	hyperParameterInputValues = [['Iterations','iterations',100],['Learning rate','learning-rate',0.001],['Regularization type','reg-type','L2'],['Regularization parameter','reg-parameter',0.001],['SGD data fraction','sgd-data-fraction',1]];
    }
    else if (algorithmName == 'SVM') {
    	hyperParameterInputValues = [['Iterations','iterations',100],['Learning rate','learning-rate',0.001],['Regularization type','reg-type','L1'],['Regularization parameter','reg-parameter',0.001],['SGD data fraction','sgd-data-fraction',1]];
    }
    else if (algorithmName == 'DECISION_TREE') {
    	hyperParameterInputValues = [['Number of classes','num-classes',2],['Max depth','max-depth',5],['Max bins','max-bins',100],['Impurity','impurity','gini']];
    }    
    else if (algorithmName == 'NAIVE_BAYES') {
    	hyperParameterInputValues = [['Lambda','lambda',1]];
    }
    else if (algorithmName == 'K_MEANS') {
    	hyperParameterInputValues = [['Iterations','iterations',20],['Number of clusters','num-clusters',3]];    	
    }

    // build input HTML for hyper-parameters
	for (var i = 0; i < hyperParameterInputValues.length; i++) {
		if (fromNext) {
	    	inputString += buildInput(hyperParameterInputValues[i][0],hyperParameterInputValues[i][1],hyperParametersArray[i]);	
    	}
    	else {
	    	inputString += buildInput(hyperParameterInputValues[i][0],hyperParameterInputValues[i][1],hyperParameterInputValues[i][2]);	
    	}
	}

    // set built input HTML
	$("#parameter-inputs").append(inputString);

    $('#prev-btn').on('click', function(e){
        e.preventDefault();
        window.location.href = '../algorithm/algorithm.jag?projectName='+projectName+'&analysisName='+analysisName+'&analysisId='+analysisId+'&datasetId='+datasetId;
    });	

    $('#btn-next').on('click', function(e){
    	e.preventDefault();
    	var algorithmName = getParameterByName('algorithmName');    	

    	var jsonData;
    	var hyperParameters = [];

	    if (algorithmName == 'LINEAR_REGRESSION') {
	    	
	    	hyperParameters[0] = $('#iterations').val();
	    	hyperParameters[1] = $('#learning-rate').val();
	    	hyperParameters[2] = $('#sgd-data-fraction').val();

	    	jsonData = '[{ "key":"Iterations","value":"'+hyperParameters[0]+'"},{"key":"Learning_Rate","value":"'+hyperParameters[1]+'"},{"key":"SGD_Data_Fraction","value":"'+hyperParameters[2]+'"}]';
	    }
	    else if (algorithmName == 'RIDGE_REGRESSION' || algorithmName == 'LASSO_REGRESSION') {
	    	
	    	hyperParameters[0] = $('#iterations').val();
	    	hyperParameters[1] = $('#learning-rate').val();
	    	hyperParameters[2] = $('#reg-parameter').val();
	    	hyperParameters[3] = $('#sgd-data-fraction').val();

	    	jsonData = '[{ "key":"Iterations","value":"'+hyperParameters[0]+'"},{"key":"Learning_Rate","value":"'+hyperParameters[1]+'"},{"key":"Reg_Parameter","value":"'+hyperParameters[2]+'"},{"key":"SGD_Data_Fraction","value":"'+hyperParameters[3]+'"}]';
	    }
	    else if (algorithmName == 'LOGISTIC_REGRESSION' || algorithmName == 'SVM') {
	    	
	    	hyperParameters[0] = $('#iterations').val();
	    	hyperParameters[1] = $('#learning-rate').val();
	    	hyperParameters[2] = $('#reg-type').val();
	    	hyperParameters[3] = $('#reg-parameter').val();
	    	hyperParameters[4] = $('#sgd-data-fraction').val();

	    	jsonData = '[{ "key":"Iterations","value":"'+hyperParameters[0]+'"},{"key":"Learning_Rate","value":"'+hyperParameters[1]+'"},{"key":"Reg_Type","value":"'+hyperParameters[2]+'"},{"key":"Reg_Parameter","value":"'+hyperParameters[3]+'"},{"key":"SGD_Data_Fraction","value":"'+hyperParameters[4]+'"}]';
	    }
	    else if (algorithmName == 'DECISION_TREE') {
	    	
	    	hyperParameters[0] = $('#num-classes').val();
	    	hyperParameters[1] = $('#max-depth').val();
	    	hyperParameters[2] = $('#max-bins').val();
	    	hyperParameters[3] = $('#impurity').val();

	    	jsonData = '[{ "key":"Num_Classes","value":"'+hyperParameters[0]+'"},{"key":"Max_Depth","value":"'+hyperParameters[1]+'"},{"key":"Max_Bins","value":"'+hyperParameters[2]+'"},{"key":"Impurity","value":"'+hyperParameters[3]+'"}]';
	    }    
	    else if (algorithmName == 'NAIVE_BAYES') {
	    	
	    	hyperParameters[0] = $('#lambda').val();

	    	jsonData = '[{ "key":"Lambda","value":"'+hyperParameters[0]+'"}]';
	    }
	    else if (algorithmName == 'K_MEANS') {
	    	
	    	hyperParameters[0] = $('#iterations').val();
	    	hyperParameters[1] = $('#num-clusters').val();

	    	jsonData = '[{ "key":"Iterations","value":"'+hyperParameters[0]+'"},{"key":"Num_Clusters","value":"'+hyperParameters[1]+'"}]';
	    }

	    $.ajax({
            type: 'POST',
            url: serverUrl+"/api//analyses/"+analysisId+"/hyperParams",
            beforeSend : function(xhr) {
                xhr.setRequestHeader("Authorization", "Basic " + authEncoded);
            },
            contentType: "application/json",
            data: jsonData,
            success: function(res){
                window.location.href = '../model/model.jag?analysisId='+analysisId+'&projectName='+projectName+'&analysisName='+analysisName+'&datasetId='+datasetId+'&algorithmName='+algorithmName+'&algorithmName='+algorithmName+'&algorithmType='+algorithmType;
            },
            error: function(res){
                var crtValArea = btnArea.prev(".ctrl-validation-panel");
                if (crtValArea.length == 0) {
                    btnArea.before(buildNortifications(res.responseJSON.status));
                }
            }
        });        

    });

    // function that cancels an analysis
    $('#cancel-analysis').on('click', function(e){
        e.preventDefault();
        $.ajax({
            type: 'DELETE',
            url: serverUrl+"/api/analyses/"+analysisId,
            beforeSend : function(xhr) {
                xhr.setRequestHeader("Authorization", "Basic " + authEncoded);
            },
            success: function(res){
                window.location.href = '../project/projects.jag';
            },
            error: function(res){
                var crtValArea = btnArea.prev(".ctrl-validation-panel");
                if (crtValArea.length == 0) {
                    btnArea.before(buildNortifications(res.responseJSON.status));
                }
            }
        });
    });

	$('#btn-build').on('click', function(e){

		$('.hyper-double').each(function(e){
            var value = $(this).val();
            if(!isValidDouble(value)){
            	showErrorMessage($(this).next('.form-val-error'),'* double is required');
            }
            
		});

		$('.hyper-integer').each(function(e) {
			var value = $(this).val();
			if(!isValidInteger(value)) {
			    showErrorMessage($(this).next('.form-val-error'),'* integer is required');	
			}
		});

	});
});

function buildInput(displayName, id, value) {

	inputString = 	'<label class="input-label">'+displayName+'<span class="help-tip glyphicon glyphicon-question-sign"></span></label>' +
					'<div class="input-control text">' +
					    '<input type="text" id="'+id+'" value="'+value+'" placeholder="input text"/>' +
					'</div>';
	return inputString;
}

function isValidDouble(number){
    return number.match(doubleRegEx) != null;
}

function isValidInteger(number) {
	return number.match(integerRegEx) != null;
}

function showErrorMessage(element, message){
    $(element).text(message);
}

function buildEvents(element){
	$(element).on('keypress', function(e) {
        showErrorMessage($(this).next('.form-val-error'), '');
	});
}

function buildHyperparametersUI(parameters){
	
	// update algorith's display name
	var algoDisplayName = parameters.displayName;
    $('#display-name').text(algoDisplayName);
    
    var allHyperparameters = '';
    var hyperParameters = parameters.hyperParameters;
    for(var i=0; i < hyperParameters.length; i++){
    	if (typeof(hyperParameters[i].type) == 'object') {
    		allHyperparameters += buildDropdown(hyperParameters[i]);
    	} else {
    		allHyperparameters += buildInputbox(hyperParameters[i]); 
    	}
    }
    return allHyperparameters;     
}

function buildInputbox(parameter){
    
    var type = parameter.type;
    
    var label = buildLabel(parameter.name);
    
    var controller = '<div class="input-control text">' +
                     '<input class="hyper-'+type+'"'+'type="text" value="" placeholder="input text"/>'+
				     '<span class="form-val-error" id="file-upload-error"></span>' +
				     '</div>';
	return label + controller;
}

function buildDropdown(parameter){
	var label = buildLabel(parameter.name);
	var controller = '<div class="input-control text"> <select>'
	for(var i=0; i<parameter.type.length; i++){
        var type = parameter.type[i];
        controller += '<option value="'+type.name+'">'+type.name+'</option>';
	}
	controller += '</select></div>';
	
	return label+controller;
}

function buildResponseSelector(workflowId, algoCategory) {
	var controller = '<div class="input-control text"> <select>';
    var label = buildLabel('Response Variable');
	$.ajax({
        url: './ajax/GetFeatures.jag',
        data: {wfid: workflowId, algocat: algoCategory},
        async: false,
        success: function(res){
        	var features = res.features;        	
        	for (var i=0; i<features.length; i++) {
        		controller += '<option value="' + features[i]+'">' + features[i] + '</option>';
        	}
        	controller += '</select></div>';        	
        },
        error: function(res){ //TODO: error handling...
        	console.log(res);
        }
	});

	return label + controller;
}

</script>

</body>
</html>
